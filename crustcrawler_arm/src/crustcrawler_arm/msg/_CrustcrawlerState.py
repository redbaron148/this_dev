"""autogenerated by genmsg_py from CrustcrawlerState.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg
import crustcrawler_arm.msg

class CrustcrawlerState(roslib.message.Message):
  _md5sum = "e4ffedb8e336ef0e71cd47f1fd9e50d2"
  _type = "crustcrawler_arm/CrustcrawlerState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """crustcrawler_arm/ArmPose arm_pose
float32[6] raw_positions
float32[6] degree_positions

================================================================================
MSG: crustcrawler_arm/ArmPose
#3d point which the end of the arm is currently occupiying

geometry_msgs/Point point
float32 attack_angle

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['arm_pose','raw_positions','degree_positions']
  _slot_types = ['crustcrawler_arm/ArmPose','float32[6]','float32[6]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       arm_pose,raw_positions,degree_positions
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(CrustcrawlerState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.arm_pose is None:
        self.arm_pose = crustcrawler_arm.msg.ArmPose()
      if self.raw_positions is None:
        self.raw_positions = [0.,0.,0.,0.,0.,0.]
      if self.degree_positions is None:
        self.degree_positions = [0.,0.,0.,0.,0.,0.]
    else:
      self.arm_pose = crustcrawler_arm.msg.ArmPose()
      self.raw_positions = [0.,0.,0.,0.,0.,0.]
      self.degree_positions = [0.,0.,0.,0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3df.pack(_x.arm_pose.point.x, _x.arm_pose.point.y, _x.arm_pose.point.z, _x.arm_pose.attack_angle))
      buff.write(_struct_6f.pack(*self.raw_positions))
      buff.write(_struct_6f.pack(*self.degree_positions))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.arm_pose is None:
        self.arm_pose = crustcrawler_arm.msg.ArmPose()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.arm_pose.point.x, _x.arm_pose.point.y, _x.arm_pose.point.z, _x.arm_pose.attack_angle,) = _struct_3df.unpack(str[start:end])
      start = end
      end += 24
      self.raw_positions = _struct_6f.unpack(str[start:end])
      start = end
      end += 24
      self.degree_positions = _struct_6f.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3df.pack(_x.arm_pose.point.x, _x.arm_pose.point.y, _x.arm_pose.point.z, _x.arm_pose.attack_angle))
      buff.write(self.raw_positions.tostring())
      buff.write(self.degree_positions.tostring())
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.arm_pose is None:
        self.arm_pose = crustcrawler_arm.msg.ArmPose()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.arm_pose.point.x, _x.arm_pose.point.y, _x.arm_pose.point.z, _x.arm_pose.attack_angle,) = _struct_3df.unpack(str[start:end])
      start = end
      end += 24
      self.raw_positions = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      start = end
      end += 24
      self.degree_positions = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3df = struct.Struct("<3df")
_struct_6f = struct.Struct("<6f")
