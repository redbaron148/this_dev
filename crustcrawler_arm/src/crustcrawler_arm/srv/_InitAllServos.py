"""autogenerated by genmsg_py from InitAllServosRequest.msg. Do not edit."""
import roslib.message
import struct


class InitAllServosRequest(roslib.message.Message):
  _md5sum = "66103ecb931718d5443bbaf900d53f99"
  _type = "crustcrawler_arm/InitAllServosRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

uint8 range_0
uint8 range_1
uint8 range_2
uint8 range_3
uint8 range_4
uint8 range_5

"""
  __slots__ = ['range_0','range_1','range_2','range_3','range_4','range_5']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       range_0,range_1,range_2,range_3,range_4,range_5
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(InitAllServosRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.range_0 is None:
        self.range_0 = 0
      if self.range_1 is None:
        self.range_1 = 0
      if self.range_2 is None:
        self.range_2 = 0
      if self.range_3 is None:
        self.range_3 = 0
      if self.range_4 is None:
        self.range_4 = 0
      if self.range_5 is None:
        self.range_5 = 0
    else:
      self.range_0 = 0
      self.range_1 = 0
      self.range_2 = 0
      self.range_3 = 0
      self.range_4 = 0
      self.range_5 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_6B.pack(_x.range_0, _x.range_1, _x.range_2, _x.range_3, _x.range_4, _x.range_5))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.range_0, _x.range_1, _x.range_2, _x.range_3, _x.range_4, _x.range_5,) = _struct_6B.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_6B.pack(_x.range_0, _x.range_1, _x.range_2, _x.range_3, _x.range_4, _x.range_5))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.range_0, _x.range_1, _x.range_2, _x.range_3, _x.range_4, _x.range_5,) = _struct_6B.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_6B = struct.Struct("<6B")
"""autogenerated by genmsg_py from InitAllServosResponse.msg. Do not edit."""
import roslib.message
import struct


class InitAllServosResponse(roslib.message.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "crustcrawler_arm/InitAllServosResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool  success


"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       success
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(InitAllServosResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
class InitAllServos(roslib.message.ServiceDefinition):
  _type          = 'crustcrawler_arm/InitAllServos'
  _md5sum = 'e6e0a5167f565b737381080daa6cf3da'
  _request_class  = InitAllServosRequest
  _response_class = InitAllServosResponse
