"""autogenerated by genmsg_py from SetAllServoPositionsRequest.msg. Do not edit."""
import roslib.message
import struct


class SetAllServoPositionsRequest(roslib.message.Message):
  _md5sum = "4c057caedc9ba29903cadacd55f801fc"
  _type = "crustcrawler_arm/SetAllServoPositionsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


int32 value_0
int32 value_1
int32 value_2
int32 value_3
int32 value_4
int32 value_5

"""
  __slots__ = ['value_0','value_1','value_2','value_3','value_4','value_5']
  _slot_types = ['int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       value_0,value_1,value_2,value_3,value_4,value_5
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(SetAllServoPositionsRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.value_0 is None:
        self.value_0 = 0
      if self.value_1 is None:
        self.value_1 = 0
      if self.value_2 is None:
        self.value_2 = 0
      if self.value_3 is None:
        self.value_3 = 0
      if self.value_4 is None:
        self.value_4 = 0
      if self.value_5 is None:
        self.value_5 = 0
    else:
      self.value_0 = 0
      self.value_1 = 0
      self.value_2 = 0
      self.value_3 = 0
      self.value_4 = 0
      self.value_5 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_6i.pack(_x.value_0, _x.value_1, _x.value_2, _x.value_3, _x.value_4, _x.value_5))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.value_0, _x.value_1, _x.value_2, _x.value_3, _x.value_4, _x.value_5,) = _struct_6i.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_6i.pack(_x.value_0, _x.value_1, _x.value_2, _x.value_3, _x.value_4, _x.value_5))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.value_0, _x.value_1, _x.value_2, _x.value_3, _x.value_4, _x.value_5,) = _struct_6i.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_6i = struct.Struct("<6i")
"""autogenerated by genmsg_py from SetAllServoPositionsResponse.msg. Do not edit."""
import roslib.message
import struct


class SetAllServoPositionsResponse(roslib.message.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "crustcrawler_arm/SetAllServoPositionsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool  success


"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       success
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(SetAllServoPositionsResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
class SetAllServoPositions(roslib.message.ServiceDefinition):
  _type          = 'crustcrawler_arm/SetAllServoPositions'
  _md5sum = '2972e13d1aa28e45d8e0550308e22e5b'
  _request_class  = SetAllServoPositionsRequest
  _response_class = SetAllServoPositionsResponse
